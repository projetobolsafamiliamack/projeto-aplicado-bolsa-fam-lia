# -*- coding: utf-8 -*-
"""EDA-bolsa_familia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HURCJjF_ttUZ1HTmzYqkxzEY-DPXqI7I

Análise Exploratória de Dados - Beneficiários do Bolsa Família por Estado (Base 2025/1)
Autores: Giovanna Santos
Guilherme Barros
Igor Eduardo
Larissa Jacinto
Objetivo: Analisar a distribuição de beneficiários do Bolsa Família por estado e faixa de renda,
          calcular cobertura em relação à população e pobreza, e gerar gráficos explicativos.
Fontes: Portal da Transparência, IBGE
"""

from google.colab import files
uploaded = files.upload()

# Bibliotecas principais
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configuração visual dos gráficos
sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (10,6)

print("Bibliotecas carregadas com sucesso!")

# Leitura dos arquivos CSV

df_meio_sal = pd.read_csv('Bolsa_Fam_mais_que_meio_sal_min.csv', sep=',')
df_baixa_renda = pd.read_csv('Bolsa_Fam_baixa_renda.csv', sep=',')
df_pobreza = pd.read_csv('Bolsa_Fam_extrema_pobreza.csv', sep=',')
df_

# Limpeza e padronização dos dados

#Padronização nome das colunas
def padroniza_colunas(df):
    df.columns = (df.columns
                  .str.strip()
                  .str.lower()
                  .str.replace(' ', '_')
                  .str.replace('ã', 'a')
                  .str.replace('ç', 'c'))
    return df

df_meio_sal = padroniza_colunas(df_meio_sal)
df_baixa_renda = padroniza_colunas(df_baixa_renda)
df_pobreza = padroniza_colunas(df_pobreza)

# Alterar nomes das colunas
df_baixa_renda = df_baixa_renda.rename(columns={'quantidade_de_pessoas_em_famílias_de_baixa_renda**_beneficiárias_do_programa_bolsa_família': 'benef_baixa_renda'})
df_pobreza = df_pobreza.rename(columns={'quantidade_de_pessoas_em_famílias_beneficiárias_do_programa_bolsa_família_em_situacao_de_pobreza,_segundo_a_faixa_do_programa*': 'benef_pobreza'})
df_meio_sal = df_meio_sal.rename(columns={'quantidade_de_pessoas_em_famílias_com_renda_per_capita_mensal_acima_de_meio_salário-mínimo***_beneficiárias_do_programa_bolsa_família' :'benef_meio_salario'})

# Junção completa por estado
bolsa = (df_baixa_renda
         .merge(df_pobreza[['código', 'nome', 'benef_pobreza']], on=['código', 'nome'], how='outer')
         .merge(df_meio_sal[['código', 'nome', 'benef_meio_salario']], on=['código', 'nome'], how='outer'))

# Converter colunas de beneficiários em numéricas, lidando com possíveis erros e separadores de milhares

bolsa['benef_baixa_renda'] = pd.to_numeric(bolsa['benef_baixa_renda'].astype(str).str.replace('.', '', regex=False), errors='coerce')
bolsa['benef_pobreza'] = pd.to_numeric(bolsa['benef_pobreza'].astype(str).str.replace('.', '', regex=False), errors='coerce')
bolsa['benef_meio_salario'] = pd.to_numeric(bolsa['benef_meio_salario'].astype(str).str.replace('.', '', regex=False), errors='coerce')


# Cria coluna total de beneficiários
bolsa['benef_total'] = (bolsa['benef_baixa_renda'].fillna(0) +
                        bolsa['benef_pobreza'].fillna(0) +
                        bolsa['benef_meio_salario'].fillna(0))

bolsa.drop(columns=['benef_meio_salario', 'código'], inplace=True) # Remover as colunas de "benf_meio_salario" pois todos os valores estavam nulos e "código" pois os valores não importam para nossa análise.
bolsa.head()

# Gráfico de distribuição por estado
import matplotlib.pyplot as plt
import seaborn as sns

# Gráfico de barras do total de beneficiários
plt.figure(figsize=(12,6))
sns.barplot(x='nome', y='benef_total', data=bolsa, palette='viridis')
plt.xticks(rotation=90)
plt.title('Distribuição do Total de Beneficiários por Estado')
plt.ylabel('Número de Beneficiários')
plt.xlabel('Estado')
plt.show()

# Transformar o DataFrame no formato long
df_melt = bolsa.melt(id_vars=['nome'],
                     value_vars=['benef_baixa_renda', 'benef_pobreza'],
                     var_name='faixa_renda',
                     value_name='beneficiarios')

# Gráfico de barras agrupadas
plt.figure(figsize=(14,6))
sns.barplot(x='nome', y='beneficiarios', hue='faixa_renda', data=df_melt, palette='Set2')
plt.xticks(rotation=90)
plt.title('Distribuição dos Beneficiários por Faixa de Renda e Estado')
plt.ylabel('Número de Beneficiários')
plt.xlabel('Estado')
plt.legend(title='Faixa de Renda')
plt.show()

df_estimativa_populacao = pd.read_csv('estimativa_dou_2025.csv', header=1, sep=',')

# Selecionar as duas primeiras colunas e renomear
df_estimativa_populacao = df_estimativa_populacao.iloc[:, :2]
df_estimativa_populacao.columns = ['nome_do_estado', 'populacao_estimada']

# Remover as duas primeiras fileiras e as últimas 5 fileiras
df_estimativa_populacao = df_estimativa_populacao.iloc[2:-5].copy()

# Limpar a coluna 'populacao_estimada' e converta para numérico
df_estimativa_populacao['populacao_estimada'] = (df_estimativa_populacao['populacao_estimada']
                                                 .astype(str)
                                                 .str.replace(',', '', regex=False)
                                                 .str.replace(r'\(.*\)', '', regex=True) # Remover conteúdo entre parênteses
                                                 .str.strip() # Remover espaços em branco iniciais/finais
                                                 )
df_estimativa_populacao['populacao_estimada'] = pd.to_numeric(df_estimativa_populacao['populacao_estimada'], errors='coerce')

display(df_estimativa_populacao.head())
display(df_estimativa_populacao.info())

# Mesclar os quadros de dados
bolsa_merged = pd.merge(bolsa, df_estimativa_populacao, left_on='nome', right_on='nome_do_estado', how='left')

# Exibir as primeiras linhas do DataFrame mesclado
display(bolsa_merged.head())

display(bolsa['nome'].unique())

#Extrair as iniciais do estado de 'nome' e criar uma nova coluna 'estado_sigla'
bolsa['estado_sigla'] = bolsa['nome'].apply(lambda x: x.split('/')[-1])

# Criar um mapeamento das iniciais dos estados para os nomes completos dos estados
state_mapping = {
    'RO': 'Rondônia', 'AC': 'Acre', 'AM': 'Amazonas', 'RR': 'Roraima',
    'PA': 'Pará', 'AP': 'Amapá', 'TO': 'Tocantins', 'MA': 'Maranhão',
    'PI': 'Piauí', 'CE': 'Ceará', 'RN': 'Rio Grande do Norte',
    'PB': 'Paraíba', 'PE': 'Pernambuco', 'AL': 'Alagoas', 'SE': 'Sergipe',
    'BA': 'Bahia', 'MG': 'Minas Gerais', 'ES': 'Espírito Santo',
    'RJ': 'Rio de Janeiro', 'SP': 'São Paulo', 'PR': 'Paraná',
    'SC': 'Santa Catarina', 'RS': 'Rio Grande do Sul', 'MS': 'Mato Grosso do Sul',
    'MT': 'Mato Grosso', 'GO': 'Goiás', 'DF': 'Distrito Federal' # DF = mapeia pro Distrito Federal
}

# Mapear iniciais de estados para nomes completos de estados em 'bolsa'
bolsa['nome_do_estado'] = bolsa['estado_sigla'].map(state_mapping)

# Mesclar os dataframes usando a nova coluna 'nome_do_estado'
bolsa_merged = pd.merge(bolsa, df_estimativa_populacao, on='nome_do_estado', how='left')

display(bolsa_merged.head())

# Calcular o percentual da população beneficiada pelo Bolsa Família
bolsa_merged['perc_populacao_beneficiada'] = (bolsa_merged['benef_total'] / bolsa_merged['populacao_estimada']) * 100
display(bolsa_merged.head())

plt.figure(figsize=(12, 6))
sns.barplot(x='nome_do_estado', y='perc_populacao_beneficiada', data=bolsa_merged, palette='coolwarm')
plt.xticks(rotation=90)
plt.title('Percentual da População Beneficiada por Estado')
plt.ylabel('Proporção da População Beneficiada')
plt.xlabel('Estado')
plt.show()

"""# Conclusão e Insights

## Principais achados da análise


**Estados com mais beneficiários**

Os estados com mais beneficiários são: SP, RJ, CE, AM e BA

**Beneficiários em situação de Pobreza**

Os estados com o maior número de beneficiários em situação de pobreza são: SP, RJ, BA, CE e AM.

**Percentual da População Benficiada por Estado**
O maior percentual da população beneficiada por Estado é do Amapá, seguido de Roraima.

## Resumo inicial

- A cobertura da população em pobreza é relativamente alta em alguns estados, indicando
   boa focalização do programa.

- A faixa de renda acima de meio salário mínimo foi removida, e os gráficos refletem
   apenas baixa renda e situação de pobreza.
- Esses insights podem ser aprofundados em análises regionais ou cruzando outros indicadores socioeconômicos.
"""